"use client";

/**
 * Auto-generated by: https://github.com/pmndrs/gltfjsx
 * Command: npx gltfjsx@6.2.16 .\models\platform.glb --output .\src\app\_models\platform.tsx --types --transform --debug
 */

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { applyColor, invertNormalMap } from "./util";

type GLTFResult = GLTF & {
  nodes: {
    platform: THREE.Mesh;
  };
  materials: {
    ["platform 303235"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Platform(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/platform.glb") as GLTFResult;

  const startTime = new Date().getTime();

  for (const [name, material] of Object.entries(materials)) {
    if (material.userData.hasColorBeenApplied) {
      continue;
    }

    try {
      const color = new THREE.Color(`#${material.name.split(" ")[1]}`);
      const coloredMaterial = applyColor(material, color);
      try {
        if (material.normalMap) {
          coloredMaterial.normalMap = invertNormalMap(coloredMaterial);
        }
      } catch (error) {
        console.error(error);
      }

      materials[name as keyof typeof materials] = coloredMaterial;
    } catch (error) {
      console.error(error);
    }
  }

  console.log(
    "Time to render textures:",
    new Date().getTime() - startTime,
    "ms",
  );

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.platform.geometry}
        material={materials["platform 303235"]}
        position={[-250, 0, 250]}
        receiveShadow
      />
    </group>
  );
}

useGLTF.preload("/models/platform.glb");
